# Use a base image with Python 3.7
FROM python:3.7 

# Set the working directory in the container
WORKDIR /app

# Install system dependencies (needed for some Python packages)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    libopenblas-dev \
    openmpi-bin \
    python3-dev

# Create a conda environment within the Docker image
RUN conda update -n base -c defaults conda
RUN conda create -n tf_env python=3.7 -y 
ENV PATH /opt/conda/envs/tf_env/bin:$PATH
RUN conda config --env --add channels conda-forge
RUN conda config --env --set channel_priority strict

# Install NumPy first for TensorFlow compatibility 
RUN conda install -c conda-forge numpy=1.21 -y 

# Install TensorFlow 2.4.3 (CPU version - for GPU, adjust accordingly)
RUN pip install tensorflow==2.4.3

# Install other required packages
RUN pip install absl-py==0.10.0 termcolor==1.1.0 wrapt==1.12.1
RUN pip install tensorflow-datasets
RUN conda install -c conda-forge scipy matplotlib pandas -y

# Optional: Install CUDA and cuDNN (if using a GPU-enabled TensorFlow version)
RUN conda install -c conda-forge cudatoolkit=11.0 cudnn=8.0 -y 

# Optional: Install Jupyter
RUN conda install -c conda-forge jupyter -y

# Copy only the necessary files to reduce image size 
COPY distributed-training.py ./ 

# Copy the remaining project files (if any)
COPY . . 

# Make port 8888 available (adjust if needed)
EXPOSE 8888

# Define environment variable (optional, customize as needed)
ENV NAME=World

# Run script when the container launches
CMD ["python", "distributed_fashion_mnist.py", "--saved_model_dir", "/app/saved_model", "--checkpoint_dir", "/app/checkpoints", "--model_type", "cnn"]
